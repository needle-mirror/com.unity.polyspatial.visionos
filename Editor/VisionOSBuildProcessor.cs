#if (UNITY_IOS || UNITY_VISIONOS || UNITY_STANDALONE_OSX) && UNITY_EDITOR_OSX
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEditor.iOS.Xcode;
using UnityEditor.UnityLinker;
using UnityEditor.XR.VisionOS;
using Debug = UnityEngine.Debug;

namespace Unity.PolySpatial.Internals.Editor
{
    internal class VisionOSBuildPreProcessor : IPreprocessBuildWithReport
    {
        internal const string k_XcodeProjName = "Unity-iPhone.xcodeproj"; // TODO real name

        public int callbackOrder => 0;

        public void OnPreprocessBuild(BuildReport report)
        {
            try
            {
                SwiftAppShellProcessor.RestoreXcodeProject(report.summary.outputPath, k_XcodeProjName);
            }
            catch (Exception e)
            {
                throw new BuildFailedException(e);
            }
        }
    }

    internal class VisionOSBuildPostProcessor : IPostprocessBuildWithReport
    {
        public int callbackOrder => 150; // after the plugin builder

        public void OnPostprocessBuild(BuildReport report)
        {
            if (report.summary.platform != BuildUtils.tmp_BuildTarget_VisionOS)
                return;

            var settings = VisionOSSettings.currentSettings;
            if (settings.appMode == VisionOSSettings.AppMode.VR)
                return;

            if (!PolySpatialSettings.instance.EnablePolySpatialRuntime
#if POLYSPATIAL_INTERNAL
                && !PolySpatialSettings.instance.ForceLinkPolySpatialRuntime
#endif
               )
            {
                return;
            }

            try
            {
                // TODO -- this is not Unity simulator SDK goop, but whether the actual real target is a simulator
                // Always true for now
                bool isSimulator = true;

                var outputPath = report.summary.outputPath;

                // Set up a VisionOSBuildSettings.swift file
                // Format x y z as floats, always with a decimal
                var xdim = settings.volumeDimensions.x.ToString("0.0");
                var ydim = settings.volumeDimensions.y.ToString("0.0");
                var zdim = settings.volumeDimensions.z.ToString("0.0");
                var content = $@"// GENERATED BY BUILD
import Foundation
import SwiftUI

class UnityVisionOSSettings {{
    static let initialIsImmersive = { (settings.volumeMode == VisionOSSettings.VolumeMode.Unbounded ? "true" : "false") }
    static let initialSize = Size3D(width: { xdim }, height: { ydim }, depth: { zdim })
}}

extension UnitySwiftUIiPhoneApp {{
    var realScene: some Scene {{ { (settings.volumeMode == VisionOSSettings.VolumeMode.Unbounded ? "immersiveScene" : "volumeScene") } }}
}}
";
                File.WriteAllText(Path.Combine(outputPath, "MainApp", "UnityVisionOSSettings.swift"), content);

                SwiftAppShellProcessor.ConfigureXcodeProject(report.summary.platform, outputPath,
                    VisionOSBuildPreProcessor.k_XcodeProjName,
                    il2cppArmWorkaround: true,
                    staticLibraryPluginName: isSimulator ? "libPolySpatial_xrsimulator.a" : "libPolySpatial_xros.a",
                    extraSourceFiles: new Dictionary<string, string>()
                    {
                        { "MainApp/UnityVisionOSSettings.swift", null }
                    }
                );

                FilterXcodeProj(outputPath, VisionOSBuildPreProcessor.k_XcodeProjName);
                FilterPlist(outputPath);
            }
            catch (Exception e)
            {
                throw new BuildFailedException(e);
            }
        }

        void ReplaceStrings(ref string contents, string[][] replacements)
        {
            foreach (var subs in replacements)
            {
                if (!contents.Contains(subs[0]))
                {
                    Debug.LogWarning($"BuildProcessor ReplaceStrings: couldn't find string '{subs[0]}'");
                }

                contents = contents.Replace(subs[0], subs[1]);
            }
        }

        void FilterXcodeProj(string outputPath, string xcodeProjName)
        {
            var xcodeProj = Path.Combine(outputPath, xcodeProjName);
            var xcodePbx = Path.Combine(xcodeProj, "project.pbxproj");

            var pbx = new PBXProject();
            pbx.ReadFromFile(xcodePbx);

            //pbx.RemoveFile(pbx.FindFileGuidByProjectPath("LaunchScreen-iPhone.storyboard"));
            //pbx.RemoveFile(pbx.FindFileGuidByProjectPath("LaunchScreen-iPad.storyboard"));
            pbx.AddFrameworkToProject(pbx.GetUnityFrameworkTargetGuid(), "CompositorServices.framework", false);
            pbx.AddFrameworkToProject(pbx.GetUnityFrameworkTargetGuid(), "ARKit.framework", false);

            // add in -ld64, for object file compat
            foreach (var tgt in new[] { pbx.GetUnityFrameworkTargetGuid(), pbx.GetUnityMainTargetGuid() })
            {
                foreach (var cfgname in pbx.BuildConfigNames())
                {
                    var cfguid = pbx.BuildConfigByName(tgt, cfgname);
                    if (cfguid == null)
                        continue;

                    var existing = pbx.GetBuildPropertyForConfig(cfguid, "OTHER_LDFLAGS") ?? "";
                    pbx.SetBuildPropertyForConfig(cfguid, "OTHER_LDFLAGS", $"-ld64 {existing}");

                    // Add TARGET_OS_XR define which was renamed to TARGET_OS_VISION in visionOS beta 2 (Xcode beta 5)
                    existing = pbx.GetBuildPropertyForConfig(cfguid, "OTHER_CFLAGS") ?? "";
                    pbx.SetBuildPropertyForConfig(cfguid, "OTHER_CFLAGS", $"-DTARGET_OS_XR {existing}");
                }
            }

            pbx.WriteToFile(xcodePbx);
        }

        private void FilterPlist(string outputPath)
        {
            var settings = VisionOSSettings.currentSettings;
            if (settings.appMode == VisionOSSettings.AppMode.VR)
                return;

            var plistPath = outputPath + "/Info.plist";
            var plist = new PlistDocument();
            plist.ReadFromFile(plistPath);

            var root = plist.root;
            root.values.Remove("UIRequiredDeviceCapabilities");
            root.values.Remove("UILaunchStoryboardName~iphone");
            root.values.Remove("UILaunchStoryboardName~ipad");

            PlistElementDict sceneManifest;
            if (root.values.ContainsKey("UIApplicationSceneManifest"))
                sceneManifest = root.values["UIApplicationSceneManifest"].AsDict();
            else
                sceneManifest = root.CreateDict("UIApplicationSceneManifest");

            sceneManifest["UIApplicationSupportsMultipleScenes"] = new PlistElementBoolean(true);

            if (settings.volumeMode == VisionOSSettings.VolumeMode.Bounded)
            {
                sceneManifest["UIApplicationPreferredDefaultSceneSessionRole"] = new PlistElementString("UIWindowSceneSessionRoleVolumetricApplication");

                float metersToPoints = 2834.65f;

                if (!root.values.ContainsKey("UILaunchPlacementParameters"))
                {
                    PlistElementDict launchParams = root.CreateDict("UILaunchPlacementParameters");
                    PlistElementDict preferredSize = launchParams.CreateDict("PreferredLaunchSize");
                    preferredSize.SetReal("Width", settings.volumeDimensions.x * metersToPoints);
                    preferredSize.SetReal("Height", settings.volumeDimensions.y * metersToPoints);
                    preferredSize.SetReal("Depth", settings.volumeDimensions.z * metersToPoints);
                }
            }
            else
            {
                // Unbounded volume. Currently there's a workaround to a platform bug where we open a normal window first.
                sceneManifest["UIApplicationPreferredDefaultSceneSessionRole"] = new PlistElementString("UIWindowSceneSessionRoleApplication");
            }

            plist.WriteToFile(plistPath);
        }
    }
}
#endif
